/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.rpc.master;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Status implements org.apache.thrift.TBase<Status, Status._Fields>, java.io.Serializable, Cloneable, Comparable<Status> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Status");

  private static final org.apache.thrift.protocol.TField TOTAL_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalLatency", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOperations", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLatency", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField THROUGHPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("throughput", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_QUOTUM_FIELD_DESC = new org.apache.thrift.protocol.TField("queryQuotum", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusTupleSchemeFactory());
  }

  public double totalLatency; // required
  public int totalOperations; // required
  public double maxLatency; // required
  public double throughput; // required
  public List<Integer> queryQuotum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_LATENCY((short)1, "totalLatency"),
    TOTAL_OPERATIONS((short)2, "totalOperations"),
    MAX_LATENCY((short)3, "maxLatency"),
    THROUGHPUT((short)4, "throughput"),
    QUERY_QUOTUM((short)5, "queryQuotum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_LATENCY
          return TOTAL_LATENCY;
        case 2: // TOTAL_OPERATIONS
          return TOTAL_OPERATIONS;
        case 3: // MAX_LATENCY
          return MAX_LATENCY;
        case 4: // THROUGHPUT
          return THROUGHPUT;
        case 5: // QUERY_QUOTUM
          return QUERY_QUOTUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALLATENCY_ISSET_ID = 0;
  private static final int __TOTALOPERATIONS_ISSET_ID = 1;
  private static final int __MAXLATENCY_ISSET_ID = 2;
  private static final int __THROUGHPUT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("totalLatency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("totalOperations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LATENCY, new org.apache.thrift.meta_data.FieldMetaData("maxLatency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.THROUGHPUT, new org.apache.thrift.meta_data.FieldMetaData("throughput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_QUOTUM, new org.apache.thrift.meta_data.FieldMetaData("queryQuotum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Status.class, metaDataMap);
  }

  public Status() {
  }

  public Status(
    double totalLatency,
    int totalOperations,
    double maxLatency,
    double throughput,
    List<Integer> queryQuotum)
  {
    this();
    this.totalLatency = totalLatency;
    setTotalLatencyIsSet(true);
    this.totalOperations = totalOperations;
    setTotalOperationsIsSet(true);
    this.maxLatency = maxLatency;
    setMaxLatencyIsSet(true);
    this.throughput = throughput;
    setThroughputIsSet(true);
    this.queryQuotum = queryQuotum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Status(Status other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalLatency = other.totalLatency;
    this.totalOperations = other.totalOperations;
    this.maxLatency = other.maxLatency;
    this.throughput = other.throughput;
    if (other.isSetQueryQuotum()) {
      List<Integer> __this__queryQuotum = new ArrayList<Integer>(other.queryQuotum);
      this.queryQuotum = __this__queryQuotum;
    }
  }

  public Status deepCopy() {
    return new Status(this);
  }

  @Override
  public void clear() {
    setTotalLatencyIsSet(false);
    this.totalLatency = 0.0;
    setTotalOperationsIsSet(false);
    this.totalOperations = 0;
    setMaxLatencyIsSet(false);
    this.maxLatency = 0.0;
    setThroughputIsSet(false);
    this.throughput = 0.0;
    this.queryQuotum = null;
  }

  public double getTotalLatency() {
    return this.totalLatency;
  }

  public Status setTotalLatency(double totalLatency) {
    this.totalLatency = totalLatency;
    setTotalLatencyIsSet(true);
    return this;
  }

  public void unsetTotalLatency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALLATENCY_ISSET_ID);
  }

  /** Returns true if field totalLatency is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalLatency() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALLATENCY_ISSET_ID);
  }

  public void setTotalLatencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALLATENCY_ISSET_ID, value);
  }

  public int getTotalOperations() {
    return this.totalOperations;
  }

  public Status setTotalOperations(int totalOperations) {
    this.totalOperations = totalOperations;
    setTotalOperationsIsSet(true);
    return this;
  }

  public void unsetTotalOperations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALOPERATIONS_ISSET_ID);
  }

  /** Returns true if field totalOperations is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOperations() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALOPERATIONS_ISSET_ID);
  }

  public void setTotalOperationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALOPERATIONS_ISSET_ID, value);
  }

  public double getMaxLatency() {
    return this.maxLatency;
  }

  public Status setMaxLatency(double maxLatency) {
    this.maxLatency = maxLatency;
    setMaxLatencyIsSet(true);
    return this;
  }

  public void unsetMaxLatency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLATENCY_ISSET_ID);
  }

  /** Returns true if field maxLatency is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLatency() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLATENCY_ISSET_ID);
  }

  public void setMaxLatencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLATENCY_ISSET_ID, value);
  }

  public double getThroughput() {
    return this.throughput;
  }

  public Status setThroughput(double throughput) {
    this.throughput = throughput;
    setThroughputIsSet(true);
    return this;
  }

  public void unsetThroughput() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THROUGHPUT_ISSET_ID);
  }

  /** Returns true if field throughput is set (has been assigned a value) and false otherwise */
  public boolean isSetThroughput() {
    return EncodingUtils.testBit(__isset_bitfield, __THROUGHPUT_ISSET_ID);
  }

  public void setThroughputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THROUGHPUT_ISSET_ID, value);
  }

  public int getQueryQuotumSize() {
    return (this.queryQuotum == null) ? 0 : this.queryQuotum.size();
  }

  public java.util.Iterator<Integer> getQueryQuotumIterator() {
    return (this.queryQuotum == null) ? null : this.queryQuotum.iterator();
  }

  public void addToQueryQuotum(int elem) {
    if (this.queryQuotum == null) {
      this.queryQuotum = new ArrayList<Integer>();
    }
    this.queryQuotum.add(elem);
  }

  public List<Integer> getQueryQuotum() {
    return this.queryQuotum;
  }

  public Status setQueryQuotum(List<Integer> queryQuotum) {
    this.queryQuotum = queryQuotum;
    return this;
  }

  public void unsetQueryQuotum() {
    this.queryQuotum = null;
  }

  /** Returns true if field queryQuotum is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryQuotum() {
    return this.queryQuotum != null;
  }

  public void setQueryQuotumIsSet(boolean value) {
    if (!value) {
      this.queryQuotum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_LATENCY:
      if (value == null) {
        unsetTotalLatency();
      } else {
        setTotalLatency((Double)value);
      }
      break;

    case TOTAL_OPERATIONS:
      if (value == null) {
        unsetTotalOperations();
      } else {
        setTotalOperations((Integer)value);
      }
      break;

    case MAX_LATENCY:
      if (value == null) {
        unsetMaxLatency();
      } else {
        setMaxLatency((Double)value);
      }
      break;

    case THROUGHPUT:
      if (value == null) {
        unsetThroughput();
      } else {
        setThroughput((Double)value);
      }
      break;

    case QUERY_QUOTUM:
      if (value == null) {
        unsetQueryQuotum();
      } else {
        setQueryQuotum((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_LATENCY:
      return Double.valueOf(getTotalLatency());

    case TOTAL_OPERATIONS:
      return Integer.valueOf(getTotalOperations());

    case MAX_LATENCY:
      return Double.valueOf(getMaxLatency());

    case THROUGHPUT:
      return Double.valueOf(getThroughput());

    case QUERY_QUOTUM:
      return getQueryQuotum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_LATENCY:
      return isSetTotalLatency();
    case TOTAL_OPERATIONS:
      return isSetTotalOperations();
    case MAX_LATENCY:
      return isSetMaxLatency();
    case THROUGHPUT:
      return isSetThroughput();
    case QUERY_QUOTUM:
      return isSetQueryQuotum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Status)
      return this.equals((Status)that);
    return false;
  }

  public boolean equals(Status that) {
    if (that == null)
      return false;

    boolean this_present_totalLatency = true;
    boolean that_present_totalLatency = true;
    if (this_present_totalLatency || that_present_totalLatency) {
      if (!(this_present_totalLatency && that_present_totalLatency))
        return false;
      if (this.totalLatency != that.totalLatency)
        return false;
    }

    boolean this_present_totalOperations = true;
    boolean that_present_totalOperations = true;
    if (this_present_totalOperations || that_present_totalOperations) {
      if (!(this_present_totalOperations && that_present_totalOperations))
        return false;
      if (this.totalOperations != that.totalOperations)
        return false;
    }

    boolean this_present_maxLatency = true;
    boolean that_present_maxLatency = true;
    if (this_present_maxLatency || that_present_maxLatency) {
      if (!(this_present_maxLatency && that_present_maxLatency))
        return false;
      if (this.maxLatency != that.maxLatency)
        return false;
    }

    boolean this_present_throughput = true;
    boolean that_present_throughput = true;
    if (this_present_throughput || that_present_throughput) {
      if (!(this_present_throughput && that_present_throughput))
        return false;
      if (this.throughput != that.throughput)
        return false;
    }

    boolean this_present_queryQuotum = true && this.isSetQueryQuotum();
    boolean that_present_queryQuotum = true && that.isSetQueryQuotum();
    if (this_present_queryQuotum || that_present_queryQuotum) {
      if (!(this_present_queryQuotum && that_present_queryQuotum))
        return false;
      if (!this.queryQuotum.equals(that.queryQuotum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Status other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalLatency()).compareTo(other.isSetTotalLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalLatency, other.totalLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalOperations()).compareTo(other.isSetTotalOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOperations, other.totalOperations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLatency()).compareTo(other.isSetMaxLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLatency, other.maxLatency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThroughput()).compareTo(other.isSetThroughput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThroughput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throughput, other.throughput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryQuotum()).compareTo(other.isSetQueryQuotum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryQuotum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryQuotum, other.queryQuotum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Status(");
    boolean first = true;

    sb.append("totalLatency:");
    sb.append(this.totalLatency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOperations:");
    sb.append(this.totalOperations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxLatency:");
    sb.append(this.maxLatency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("throughput:");
    sb.append(this.throughput);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryQuotum:");
    if (this.queryQuotum == null) {
      sb.append("null");
    } else {
      sb.append(this.queryQuotum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusStandardSchemeFactory implements SchemeFactory {
    public StatusStandardScheme getScheme() {
      return new StatusStandardScheme();
    }
  }

  private static class StatusStandardScheme extends StandardScheme<Status> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalLatency = iprot.readDouble();
              struct.setTotalLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalOperations = iprot.readI32();
              struct.setTotalOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxLatency = iprot.readDouble();
              struct.setMaxLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THROUGHPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.throughput = iprot.readDouble();
              struct.setThroughputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_QUOTUM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.queryQuotum = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.queryQuotum.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setQueryQuotumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Status struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_LATENCY_FIELD_DESC);
      oprot.writeDouble(struct.totalLatency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OPERATIONS_FIELD_DESC);
      oprot.writeI32(struct.totalOperations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_LATENCY_FIELD_DESC);
      oprot.writeDouble(struct.maxLatency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THROUGHPUT_FIELD_DESC);
      oprot.writeDouble(struct.throughput);
      oprot.writeFieldEnd();
      if (struct.queryQuotum != null) {
        oprot.writeFieldBegin(QUERY_QUOTUM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.queryQuotum.size()));
          for (int _iter3 : struct.queryQuotum)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusTupleSchemeFactory implements SchemeFactory {
    public StatusTupleScheme getScheme() {
      return new StatusTupleScheme();
    }
  }

  private static class StatusTupleScheme extends TupleScheme<Status> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Status struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalLatency()) {
        optionals.set(0);
      }
      if (struct.isSetTotalOperations()) {
        optionals.set(1);
      }
      if (struct.isSetMaxLatency()) {
        optionals.set(2);
      }
      if (struct.isSetThroughput()) {
        optionals.set(3);
      }
      if (struct.isSetQueryQuotum()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTotalLatency()) {
        oprot.writeDouble(struct.totalLatency);
      }
      if (struct.isSetTotalOperations()) {
        oprot.writeI32(struct.totalOperations);
      }
      if (struct.isSetMaxLatency()) {
        oprot.writeDouble(struct.maxLatency);
      }
      if (struct.isSetThroughput()) {
        oprot.writeDouble(struct.throughput);
      }
      if (struct.isSetQueryQuotum()) {
        {
          oprot.writeI32(struct.queryQuotum.size());
          for (int _iter4 : struct.queryQuotum)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Status struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.totalLatency = iprot.readDouble();
        struct.setTotalLatencyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalOperations = iprot.readI32();
        struct.setTotalOperationsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxLatency = iprot.readDouble();
        struct.setMaxLatencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.throughput = iprot.readDouble();
        struct.setThroughputIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.queryQuotum = new ArrayList<Integer>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            int _elem7;
            _elem7 = iprot.readI32();
            struct.queryQuotum.add(_elem7);
          }
        }
        struct.setQueryQuotumIsSet(true);
      }
    }
  }

}

