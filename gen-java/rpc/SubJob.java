/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SubJob implements org.apache.thrift.TBase<SubJob, SubJob._Fields>, java.io.Serializable, Cloneable, Comparable<SubJob> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubJob");

  private static final org.apache.thrift.protocol.TField SUB_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subJobID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("opCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubJobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubJobTupleSchemeFactory());
  }

  public int subJobID; // required
  public int opCount; // required
  public int threadNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_JOB_ID((short)1, "subJobID"),
    OP_COUNT((short)2, "opCount"),
    THREAD_NUM((short)3, "threadNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_JOB_ID
          return SUB_JOB_ID;
        case 2: // OP_COUNT
          return OP_COUNT;
        case 3: // THREAD_NUM
          return THREAD_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBJOBID_ISSET_ID = 0;
  private static final int __OPCOUNT_ISSET_ID = 1;
  private static final int __THREADNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("subJobID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("opCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubJob.class, metaDataMap);
  }

  public SubJob() {
    this.subJobID = -1;

  }

  public SubJob(
    int subJobID,
    int opCount,
    int threadNum)
  {
    this();
    this.subJobID = subJobID;
    setSubJobIDIsSet(true);
    this.opCount = opCount;
    setOpCountIsSet(true);
    this.threadNum = threadNum;
    setThreadNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubJob(SubJob other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subJobID = other.subJobID;
    this.opCount = other.opCount;
    this.threadNum = other.threadNum;
  }

  public SubJob deepCopy() {
    return new SubJob(this);
  }

  @Override
  public void clear() {
    this.subJobID = -1;

    setOpCountIsSet(false);
    this.opCount = 0;
    setThreadNumIsSet(false);
    this.threadNum = 0;
  }

  public int getSubJobID() {
    return this.subJobID;
  }

  public SubJob setSubJobID(int subJobID) {
    this.subJobID = subJobID;
    setSubJobIDIsSet(true);
    return this;
  }

  public void unsetSubJobID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJOBID_ISSET_ID);
  }

  /** Returns true if field subJobID is set (has been assigned a value) and false otherwise */
  public boolean isSetSubJobID() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBJOBID_ISSET_ID);
  }

  public void setSubJobIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJOBID_ISSET_ID, value);
  }

  public int getOpCount() {
    return this.opCount;
  }

  public SubJob setOpCount(int opCount) {
    this.opCount = opCount;
    setOpCountIsSet(true);
    return this;
  }

  public void unsetOpCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPCOUNT_ISSET_ID);
  }

  /** Returns true if field opCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOpCount() {
    return EncodingUtils.testBit(__isset_bitfield, __OPCOUNT_ISSET_ID);
  }

  public void setOpCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPCOUNT_ISSET_ID, value);
  }

  public int getThreadNum() {
    return this.threadNum;
  }

  public SubJob setThreadNum(int threadNum) {
    this.threadNum = threadNum;
    setThreadNumIsSet(true);
    return this;
  }

  public void unsetThreadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
  }

  public void setThreadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_JOB_ID:
      if (value == null) {
        unsetSubJobID();
      } else {
        setSubJobID((Integer)value);
      }
      break;

    case OP_COUNT:
      if (value == null) {
        unsetOpCount();
      } else {
        setOpCount((Integer)value);
      }
      break;

    case THREAD_NUM:
      if (value == null) {
        unsetThreadNum();
      } else {
        setThreadNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_JOB_ID:
      return Integer.valueOf(getSubJobID());

    case OP_COUNT:
      return Integer.valueOf(getOpCount());

    case THREAD_NUM:
      return Integer.valueOf(getThreadNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_JOB_ID:
      return isSetSubJobID();
    case OP_COUNT:
      return isSetOpCount();
    case THREAD_NUM:
      return isSetThreadNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubJob)
      return this.equals((SubJob)that);
    return false;
  }

  public boolean equals(SubJob that) {
    if (that == null)
      return false;

    boolean this_present_subJobID = true;
    boolean that_present_subJobID = true;
    if (this_present_subJobID || that_present_subJobID) {
      if (!(this_present_subJobID && that_present_subJobID))
        return false;
      if (this.subJobID != that.subJobID)
        return false;
    }

    boolean this_present_opCount = true;
    boolean that_present_opCount = true;
    if (this_present_opCount || that_present_opCount) {
      if (!(this_present_opCount && that_present_opCount))
        return false;
      if (this.opCount != that.opCount)
        return false;
    }

    boolean this_present_threadNum = true;
    boolean that_present_threadNum = true;
    if (this_present_threadNum || that_present_threadNum) {
      if (!(this_present_threadNum && that_present_threadNum))
        return false;
      if (this.threadNum != that.threadNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubJob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubJobID()).compareTo(other.isSetSubJobID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubJobID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subJobID, other.subJobID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpCount()).compareTo(other.isSetOpCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opCount, other.opCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubJob(");
    boolean first = true;

    sb.append("subJobID:");
    sb.append(this.subJobID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("opCount:");
    sb.append(this.opCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadNum:");
    sb.append(this.threadNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubJobStandardSchemeFactory implements SchemeFactory {
    public SubJobStandardScheme getScheme() {
      return new SubJobStandardScheme();
    }
  }

  private static class SubJobStandardScheme extends StandardScheme<SubJob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subJobID = iprot.readI32();
              struct.setSubJobIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opCount = iprot.readI32();
              struct.setOpCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadNum = iprot.readI32();
              struct.setThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubJob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUB_JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.subJobID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OP_COUNT_FIELD_DESC);
      oprot.writeI32(struct.opCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
      oprot.writeI32(struct.threadNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubJobTupleSchemeFactory implements SchemeFactory {
    public SubJobTupleScheme getScheme() {
      return new SubJobTupleScheme();
    }
  }

  private static class SubJobTupleScheme extends TupleScheme<SubJob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubJob struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubJobID()) {
        optionals.set(0);
      }
      if (struct.isSetOpCount()) {
        optionals.set(1);
      }
      if (struct.isSetThreadNum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubJobID()) {
        oprot.writeI32(struct.subJobID);
      }
      if (struct.isSetOpCount()) {
        oprot.writeI32(struct.opCount);
      }
      if (struct.isSetThreadNum()) {
        oprot.writeI32(struct.threadNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubJob struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.subJobID = iprot.readI32();
        struct.setSubJobIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.opCount = iprot.readI32();
        struct.setOpCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.threadNum = iprot.readI32();
        struct.setThreadNumIsSet(true);
      }
    }
  }

}

