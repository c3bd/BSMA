/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Job implements org.apache.thrift.TBase<Job, Job._Fields>, java.io.Serializable, Cloneable, Comparable<Job> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Job");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DB_IMPL_FIELD_DESC = new org.apache.thrift.protocol.TField("dbImpl", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField CUST_DB_IMPL_FIELD_DESC = new org.apache.thrift.protocol.TField("custDbImpl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("queries", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("subJobs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("props", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField JARS_FIELD_DESC = new org.apache.thrift.protocol.TField("jars", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobTupleSchemeFactory());
  }

  public int jobID; // required
  public String name; // required
  public byte dbImpl; // required
  public String custDbImpl; // optional
  public List<Query> queries; // required
  public List<SubJob> subJobs; // required
  public Map<String,String> props; // optional
  public String description; // required
  public List<String> jars; // required
  public String msg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "jobID"),
    NAME((short)2, "name"),
    DB_IMPL((short)3, "dbImpl"),
    CUST_DB_IMPL((short)4, "custDbImpl"),
    QUERIES((short)5, "queries"),
    SUB_JOBS((short)6, "subJobs"),
    PROPS((short)7, "props"),
    DESCRIPTION((short)8, "description"),
    JARS((short)9, "jars"),
    MSG((short)10, "msg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // NAME
          return NAME;
        case 3: // DB_IMPL
          return DB_IMPL;
        case 4: // CUST_DB_IMPL
          return CUST_DB_IMPL;
        case 5: // QUERIES
          return QUERIES;
        case 6: // SUB_JOBS
          return SUB_JOBS;
        case 7: // PROPS
          return PROPS;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // JARS
          return JARS;
        case 10: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __JOBID_ISSET_ID = 0;
  private static final int __DBIMPL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CUST_DB_IMPL,_Fields.PROPS,_Fields.MSG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_IMPL, new org.apache.thrift.meta_data.FieldMetaData("dbImpl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CUST_DB_IMPL, new org.apache.thrift.meta_data.FieldMetaData("custDbImpl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERIES, new org.apache.thrift.meta_data.FieldMetaData("queries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Query.class))));
    tmpMap.put(_Fields.SUB_JOBS, new org.apache.thrift.meta_data.FieldMetaData("subJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubJob.class))));
    tmpMap.put(_Fields.PROPS, new org.apache.thrift.meta_data.FieldMetaData("props", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JARS, new org.apache.thrift.meta_data.FieldMetaData("jars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
    this.jobID = -1;

  }

  public Job(
    int jobID,
    String name,
    byte dbImpl,
    List<Query> queries,
    List<SubJob> subJobs,
    String description,
    List<String> jars)
  {
    this();
    this.jobID = jobID;
    setJobIDIsSet(true);
    this.name = name;
    this.dbImpl = dbImpl;
    setDbImplIsSet(true);
    this.queries = queries;
    this.subJobs = subJobs;
    this.description = description;
    this.jars = jars;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bitfield = other.__isset_bitfield;
    this.jobID = other.jobID;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.dbImpl = other.dbImpl;
    if (other.isSetCustDbImpl()) {
      this.custDbImpl = other.custDbImpl;
    }
    if (other.isSetQueries()) {
      List<Query> __this__queries = new ArrayList<Query>(other.queries.size());
      for (Query other_element : other.queries) {
        __this__queries.add(new Query(other_element));
      }
      this.queries = __this__queries;
    }
    if (other.isSetSubJobs()) {
      List<SubJob> __this__subJobs = new ArrayList<SubJob>(other.subJobs.size());
      for (SubJob other_element : other.subJobs) {
        __this__subJobs.add(new SubJob(other_element));
      }
      this.subJobs = __this__subJobs;
    }
    if (other.isSetProps()) {
      Map<String,String> __this__props = new HashMap<String,String>(other.props);
      this.props = __this__props;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetJars()) {
      List<String> __this__jars = new ArrayList<String>(other.jars);
      this.jars = __this__jars;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    this.jobID = -1;

    this.name = null;
    setDbImplIsSet(false);
    this.dbImpl = 0;
    this.custDbImpl = null;
    this.queries = null;
    this.subJobs = null;
    this.props = null;
    this.description = null;
    this.jars = null;
    this.msg = null;
  }

  public int getJobID() {
    return this.jobID;
  }

  public Job setJobID(int jobID) {
    this.jobID = jobID;
    setJobIDIsSet(true);
    return this;
  }

  public void unsetJobID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobID is set (has been assigned a value) and false otherwise */
  public boolean isSetJobID() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Job setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getDbImpl() {
    return this.dbImpl;
  }

  public Job setDbImpl(byte dbImpl) {
    this.dbImpl = dbImpl;
    setDbImplIsSet(true);
    return this;
  }

  public void unsetDbImpl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DBIMPL_ISSET_ID);
  }

  /** Returns true if field dbImpl is set (has been assigned a value) and false otherwise */
  public boolean isSetDbImpl() {
    return EncodingUtils.testBit(__isset_bitfield, __DBIMPL_ISSET_ID);
  }

  public void setDbImplIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DBIMPL_ISSET_ID, value);
  }

  public String getCustDbImpl() {
    return this.custDbImpl;
  }

  public Job setCustDbImpl(String custDbImpl) {
    this.custDbImpl = custDbImpl;
    return this;
  }

  public void unsetCustDbImpl() {
    this.custDbImpl = null;
  }

  /** Returns true if field custDbImpl is set (has been assigned a value) and false otherwise */
  public boolean isSetCustDbImpl() {
    return this.custDbImpl != null;
  }

  public void setCustDbImplIsSet(boolean value) {
    if (!value) {
      this.custDbImpl = null;
    }
  }

  public int getQueriesSize() {
    return (this.queries == null) ? 0 : this.queries.size();
  }

  public java.util.Iterator<Query> getQueriesIterator() {
    return (this.queries == null) ? null : this.queries.iterator();
  }

  public void addToQueries(Query elem) {
    if (this.queries == null) {
      this.queries = new ArrayList<Query>();
    }
    this.queries.add(elem);
  }

  public List<Query> getQueries() {
    return this.queries;
  }

  public Job setQueries(List<Query> queries) {
    this.queries = queries;
    return this;
  }

  public void unsetQueries() {
    this.queries = null;
  }

  /** Returns true if field queries is set (has been assigned a value) and false otherwise */
  public boolean isSetQueries() {
    return this.queries != null;
  }

  public void setQueriesIsSet(boolean value) {
    if (!value) {
      this.queries = null;
    }
  }

  public int getSubJobsSize() {
    return (this.subJobs == null) ? 0 : this.subJobs.size();
  }

  public java.util.Iterator<SubJob> getSubJobsIterator() {
    return (this.subJobs == null) ? null : this.subJobs.iterator();
  }

  public void addToSubJobs(SubJob elem) {
    if (this.subJobs == null) {
      this.subJobs = new ArrayList<SubJob>();
    }
    this.subJobs.add(elem);
  }

  public List<SubJob> getSubJobs() {
    return this.subJobs;
  }

  public Job setSubJobs(List<SubJob> subJobs) {
    this.subJobs = subJobs;
    return this;
  }

  public void unsetSubJobs() {
    this.subJobs = null;
  }

  /** Returns true if field subJobs is set (has been assigned a value) and false otherwise */
  public boolean isSetSubJobs() {
    return this.subJobs != null;
  }

  public void setSubJobsIsSet(boolean value) {
    if (!value) {
      this.subJobs = null;
    }
  }

  public int getPropsSize() {
    return (this.props == null) ? 0 : this.props.size();
  }

  public void putToProps(String key, String val) {
    if (this.props == null) {
      this.props = new HashMap<String,String>();
    }
    this.props.put(key, val);
  }

  public Map<String,String> getProps() {
    return this.props;
  }

  public Job setProps(Map<String,String> props) {
    this.props = props;
    return this;
  }

  public void unsetProps() {
    this.props = null;
  }

  /** Returns true if field props is set (has been assigned a value) and false otherwise */
  public boolean isSetProps() {
    return this.props != null;
  }

  public void setPropsIsSet(boolean value) {
    if (!value) {
      this.props = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Job setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getJarsSize() {
    return (this.jars == null) ? 0 : this.jars.size();
  }

  public java.util.Iterator<String> getJarsIterator() {
    return (this.jars == null) ? null : this.jars.iterator();
  }

  public void addToJars(String elem) {
    if (this.jars == null) {
      this.jars = new ArrayList<String>();
    }
    this.jars.add(elem);
  }

  public List<String> getJars() {
    return this.jars;
  }

  public Job setJars(List<String> jars) {
    this.jars = jars;
    return this;
  }

  public void unsetJars() {
    this.jars = null;
  }

  /** Returns true if field jars is set (has been assigned a value) and false otherwise */
  public boolean isSetJars() {
    return this.jars != null;
  }

  public void setJarsIsSet(boolean value) {
    if (!value) {
      this.jars = null;
    }
  }

  public String getMsg() {
    return this.msg;
  }

  public Job setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJobID();
      } else {
        setJobID((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DB_IMPL:
      if (value == null) {
        unsetDbImpl();
      } else {
        setDbImpl((Byte)value);
      }
      break;

    case CUST_DB_IMPL:
      if (value == null) {
        unsetCustDbImpl();
      } else {
        setCustDbImpl((String)value);
      }
      break;

    case QUERIES:
      if (value == null) {
        unsetQueries();
      } else {
        setQueries((List<Query>)value);
      }
      break;

    case SUB_JOBS:
      if (value == null) {
        unsetSubJobs();
      } else {
        setSubJobs((List<SubJob>)value);
      }
      break;

    case PROPS:
      if (value == null) {
        unsetProps();
      } else {
        setProps((Map<String,String>)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case JARS:
      if (value == null) {
        unsetJars();
      } else {
        setJars((List<String>)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return Integer.valueOf(getJobID());

    case NAME:
      return getName();

    case DB_IMPL:
      return Byte.valueOf(getDbImpl());

    case CUST_DB_IMPL:
      return getCustDbImpl();

    case QUERIES:
      return getQueries();

    case SUB_JOBS:
      return getSubJobs();

    case PROPS:
      return getProps();

    case DESCRIPTION:
      return getDescription();

    case JARS:
      return getJars();

    case MSG:
      return getMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJobID();
    case NAME:
      return isSetName();
    case DB_IMPL:
      return isSetDbImpl();
    case CUST_DB_IMPL:
      return isSetCustDbImpl();
    case QUERIES:
      return isSetQueries();
    case SUB_JOBS:
      return isSetSubJobs();
    case PROPS:
      return isSetProps();
    case DESCRIPTION:
      return isSetDescription();
    case JARS:
      return isSetJars();
    case MSG:
      return isSetMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;

    boolean this_present_jobID = true;
    boolean that_present_jobID = true;
    if (this_present_jobID || that_present_jobID) {
      if (!(this_present_jobID && that_present_jobID))
        return false;
      if (this.jobID != that.jobID)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dbImpl = true;
    boolean that_present_dbImpl = true;
    if (this_present_dbImpl || that_present_dbImpl) {
      if (!(this_present_dbImpl && that_present_dbImpl))
        return false;
      if (this.dbImpl != that.dbImpl)
        return false;
    }

    boolean this_present_custDbImpl = true && this.isSetCustDbImpl();
    boolean that_present_custDbImpl = true && that.isSetCustDbImpl();
    if (this_present_custDbImpl || that_present_custDbImpl) {
      if (!(this_present_custDbImpl && that_present_custDbImpl))
        return false;
      if (!this.custDbImpl.equals(that.custDbImpl))
        return false;
    }

    boolean this_present_queries = true && this.isSetQueries();
    boolean that_present_queries = true && that.isSetQueries();
    if (this_present_queries || that_present_queries) {
      if (!(this_present_queries && that_present_queries))
        return false;
      if (!this.queries.equals(that.queries))
        return false;
    }

    boolean this_present_subJobs = true && this.isSetSubJobs();
    boolean that_present_subJobs = true && that.isSetSubJobs();
    if (this_present_subJobs || that_present_subJobs) {
      if (!(this_present_subJobs && that_present_subJobs))
        return false;
      if (!this.subJobs.equals(that.subJobs))
        return false;
    }

    boolean this_present_props = true && this.isSetProps();
    boolean that_present_props = true && that.isSetProps();
    if (this_present_props || that_present_props) {
      if (!(this_present_props && that_present_props))
        return false;
      if (!this.props.equals(that.props))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_jars = true && this.isSetJars();
    boolean that_present_jars = true && that.isSetJars();
    if (this_present_jars || that_present_jars) {
      if (!(this_present_jars && that_present_jars))
        return false;
      if (!this.jars.equals(that.jars))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobID()).compareTo(other.isSetJobID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobID, other.jobID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbImpl()).compareTo(other.isSetDbImpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbImpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbImpl, other.dbImpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustDbImpl()).compareTo(other.isSetCustDbImpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustDbImpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custDbImpl, other.custDbImpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueries()).compareTo(other.isSetQueries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queries, other.queries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubJobs()).compareTo(other.isSetSubJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subJobs, other.subJobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProps()).compareTo(other.isSetProps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.props, other.props);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJars()).compareTo(other.isSetJars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jars, other.jars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Job(");
    boolean first = true;

    sb.append("jobID:");
    sb.append(this.jobID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbImpl:");
    sb.append(this.dbImpl);
    first = false;
    if (isSetCustDbImpl()) {
      if (!first) sb.append(", ");
      sb.append("custDbImpl:");
      if (this.custDbImpl == null) {
        sb.append("null");
      } else {
        sb.append(this.custDbImpl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("queries:");
    if (this.queries == null) {
      sb.append("null");
    } else {
      sb.append(this.queries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subJobs:");
    if (this.subJobs == null) {
      sb.append("null");
    } else {
      sb.append(this.subJobs);
    }
    first = false;
    if (isSetProps()) {
      if (!first) sb.append(", ");
      sb.append("props:");
      if (this.props == null) {
        sb.append("null");
      } else {
        sb.append(this.props);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jars:");
    if (this.jars == null) {
      sb.append("null");
    } else {
      sb.append(this.jars);
    }
    first = false;
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobStandardSchemeFactory implements SchemeFactory {
    public JobStandardScheme getScheme() {
      return new JobStandardScheme();
    }
  }

  private static class JobStandardScheme extends StandardScheme<Job> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Job struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobID = iprot.readI32();
              struct.setJobIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_IMPL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.dbImpl = iprot.readByte();
              struct.setDbImplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUST_DB_IMPL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.custDbImpl = iprot.readString();
              struct.setCustDbImplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.queries = new ArrayList<Query>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Query _elem2;
                  _elem2 = new Query();
                  _elem2.read(iprot);
                  struct.queries.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setQueriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.subJobs = new ArrayList<SubJob>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  SubJob _elem5;
                  _elem5 = new SubJob();
                  _elem5.read(iprot);
                  struct.subJobs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setSubJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.props = new HashMap<String,String>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  String _key8;
                  String _val9;
                  _key8 = iprot.readString();
                  _val9 = iprot.readString();
                  struct.props.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setPropsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // JARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.jars = new ArrayList<String>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  String _elem12;
                  _elem12 = iprot.readString();
                  struct.jars.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setJarsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Job struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobID);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DB_IMPL_FIELD_DESC);
      oprot.writeByte(struct.dbImpl);
      oprot.writeFieldEnd();
      if (struct.custDbImpl != null) {
        if (struct.isSetCustDbImpl()) {
          oprot.writeFieldBegin(CUST_DB_IMPL_FIELD_DESC);
          oprot.writeString(struct.custDbImpl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queries != null) {
        oprot.writeFieldBegin(QUERIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.queries.size()));
          for (Query _iter13 : struct.queries)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subJobs != null) {
        oprot.writeFieldBegin(SUB_JOBS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subJobs.size()));
          for (SubJob _iter14 : struct.subJobs)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.props != null) {
        if (struct.isSetProps()) {
          oprot.writeFieldBegin(PROPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.props.size()));
            for (Map.Entry<String, String> _iter15 : struct.props.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.jars != null) {
        oprot.writeFieldBegin(JARS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.jars.size()));
          for (String _iter16 : struct.jars)
          {
            oprot.writeString(_iter16);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobTupleSchemeFactory implements SchemeFactory {
    public JobTupleScheme getScheme() {
      return new JobTupleScheme();
    }
  }

  private static class JobTupleScheme extends TupleScheme<Job> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobID()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDbImpl()) {
        optionals.set(2);
      }
      if (struct.isSetCustDbImpl()) {
        optionals.set(3);
      }
      if (struct.isSetQueries()) {
        optionals.set(4);
      }
      if (struct.isSetSubJobs()) {
        optionals.set(5);
      }
      if (struct.isSetProps()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetJars()) {
        optionals.set(8);
      }
      if (struct.isSetMsg()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetJobID()) {
        oprot.writeI32(struct.jobID);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDbImpl()) {
        oprot.writeByte(struct.dbImpl);
      }
      if (struct.isSetCustDbImpl()) {
        oprot.writeString(struct.custDbImpl);
      }
      if (struct.isSetQueries()) {
        {
          oprot.writeI32(struct.queries.size());
          for (Query _iter17 : struct.queries)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetSubJobs()) {
        {
          oprot.writeI32(struct.subJobs.size());
          for (SubJob _iter18 : struct.subJobs)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetProps()) {
        {
          oprot.writeI32(struct.props.size());
          for (Map.Entry<String, String> _iter19 : struct.props.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
        }
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetJars()) {
        {
          oprot.writeI32(struct.jars.size());
          for (String _iter20 : struct.jars)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Job struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.jobID = iprot.readI32();
        struct.setJobIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dbImpl = iprot.readByte();
        struct.setDbImplIsSet(true);
      }
      if (incoming.get(3)) {
        struct.custDbImpl = iprot.readString();
        struct.setCustDbImplIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.queries = new ArrayList<Query>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            Query _elem23;
            _elem23 = new Query();
            _elem23.read(iprot);
            struct.queries.add(_elem23);
          }
        }
        struct.setQueriesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subJobs = new ArrayList<SubJob>(_list24.size);
          for (int _i25 = 0; _i25 < _list24.size; ++_i25)
          {
            SubJob _elem26;
            _elem26 = new SubJob();
            _elem26.read(iprot);
            struct.subJobs.add(_elem26);
          }
        }
        struct.setSubJobsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.props = new HashMap<String,String>(2*_map27.size);
          for (int _i28 = 0; _i28 < _map27.size; ++_i28)
          {
            String _key29;
            String _val30;
            _key29 = iprot.readString();
            _val30 = iprot.readString();
            struct.props.put(_key29, _val30);
          }
        }
        struct.setPropsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.jars = new ArrayList<String>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            String _elem33;
            _elem33 = iprot.readString();
            struct.jars.add(_elem33);
          }
        }
        struct.setJarsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
    }
  }

}

