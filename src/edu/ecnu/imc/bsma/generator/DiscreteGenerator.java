/**                                                                                                                                                                                
 * Copyright (c) 2012 Institute of Massive Computing, East China Normal University.
 * NOTICE: This file is based on the corresponding one in YCSB [Copyright (c) 2010 Yahoo! Inc.]                                                                                                                          
 *                                                                                                                                                                                 
 * Licensed under the Apache License, Version 2.0 (the "License"); you                                                                                                             
 * may not use this file except in compliance with the License. You                                                                                                                
 * may obtain a copy of the License at                                                                                                                                             
 *                                                                                                                                                                                 
 * http://www.apache.org/licenses/LICENSE-2.0                                                                                                                                      
 *                                                                                                                                                                                 
 * Unless required by applicable law or agreed to in writing, software                                                                                                             
 * distributed under the License is distributed on an "AS IS" BASIS,                                                                                                               
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or                                                                                                                 
 * implied. See the License for the specific language governing                                                                                                                    
 * permissions and limitations under the License. See accompanying                                                                                                                 
 * LICENSE file.                                                                                                                                                                   
 */

package edu.ecnu.imc.bsma.generator;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;

import edu.ecnu.imc.bsma.WorkloadException;

/**
 * Generates a distribution by choosing from a discrete set of values.
 * @modify xiafan
 */
public class DiscreteGenerator<ValueType> extends Generator<ValueType> {
	class Pair {
		public double _weight;
		public ValueType _value;

		Pair(double weight, ValueType value) {
			_weight = weight;
			_value = value;
		}
	}

	List<Pair> _values;
	Random _random;
	ValueType _lastvalue;

	public DiscreteGenerator() {
		_values = new ArrayList<Pair>();
		_random = new Random();
		_lastvalue = null;
	}

	boolean inited = false;

	class PairComp implements Comparator<Pair> {
		@Override
		public int compare(Pair arg0, Pair arg1) {
			return Double.compare(arg0._weight, arg1._weight);
		}
	}

	PairComp comp = new PairComp();

	/**
	 * Generate the next string in the distribution.
	 */
	public ValueType nextString() {
		if (inited == false) {
			Collections.sort(_values, comp);

			double sum = 0.0f;
			for (Pair pair : _values) {
				double tmp = pair._weight;
				pair._weight = sum;
				sum += tmp;
			}
			assert sum > 1.0 - 0.000000000001;
		}

		double val = _random.nextDouble();
		int idx = Collections.binarySearch(_values, new Pair(val, null), comp);
		idx = Math.abs(idx + 1);
		assert idx < _values.size();
		
		return _values.get(idx)._value;
	}

	/**
	 * If the generator returns numeric (integer) values, return the next value
	 * as an int. Default is to return -1, which is appropriate for generators
	 * that do not return numeric values.
	 * 
	 * @throws WorkloadException
	 *             if this generator does not support integer values
	 */
	public int nextInt() throws WorkloadException {
		throw new WorkloadException(
				"DiscreteGenerator does not support nextInt()");
	}

	/**
	 * Return the previous string generated by the distribution; e.g., returned
	 * from the last nextString() call. Calling lastString() should not advance
	 * the distribution or have any side effects. If nextString() has not yet
	 * been called, lastString() should return something reasonable.
	 */
	public ValueType lastString() {
		if (_lastvalue == null) {
			_lastvalue = nextString();
		}
		return _lastvalue;
	}

	public void addValue(double weight, ValueType value) {
		_values.add(new Pair(weight, value));
	}
}
